// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(a=x,b=false,sel=zx,out=zeroxr);
   Not16(in=zeroxr,out=notxr);
   Mux16(a=zeroxr,b=notxr,sel=nx,out=xr);

   Mux16(a=y,b=false,sel=zy,out=zeroyr);
   Not16(in=zeroyr,out=notyr);
   Mux16(a=zeroyr,b=notyr,sel=ny,out=yr);

   Add16(a=xr,b=yr,out=xaddy);
   And16(a=xr,b=yr,out=xandy);
   Mux16(a=xandy,b=xaddy,sel=f,out=fr);

   Not16(in=fr,out=notfr);
   Mux16(a=fr,b=notfr,sel=no,out=out,out[15]=o15,out[14]=o14,out[13]=o13,out[12]=o12,out[11]=o11,out[10]=o10,out[9]=o9,out[8]=o8,out[7]=o7,out[6]=o6,out[5]=o5,out[4]=o4,out[3]=o3,out[2]=o2,out[1]=o1,out[0]=o0);

   Or16Way(in[15]=o15,in[14]=o14,in[13]=o13,in[12]=o12,in[11]=o11,in[10]=o10,in[9]=o9,in[8]=o8,in[7]=o7,in[6]=o6,in[5]=o5,in[4]=o4,in[3]=o3,in[2]=o2,in[1]=o1,in[0]=o0,out=o);  //for zr
   Not(in=o,out=zr);

   And(a=o15,b=true,out=ng); //for ng
}
